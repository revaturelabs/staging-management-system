package com.revature.util;

import java.util.ArrayList;
import java.util.Random;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;

import com.revature.entities.Associate;
import com.revature.entities.Checkin;
import com.revature.entities.Client;
<<<<<<< HEAD
import com.revature.entities.ClientQ;
import com.revature.entities.Interviews;
=======
import com.revature.entities.Credential;
import com.revature.entities.InterviewQuestion;
import com.revature.entities.InterviewStatuses;
import com.revature.entities.Interview;
>>>>>>> 7c3deba117e26faf8ee05f21df2d0679cab31eea
import com.revature.entities.Job;
import com.revature.services.AssociateService;
import com.revature.services.CheckinService;
import com.revature.services.ClientQService;
import com.revature.services.ClientService;
import com.revature.services.InterviewsService;
import com.revature.services.JobService;

public class DataGeneration
{
  
  @Autowired
  CheckinService checkinService;
  @Autowired 
  ClientQService clientQService;
  @Autowired
  InterviewsService interviewsService;
  @Autowired
  JobService jobService;
  @Autowired
  ClientService clientService;
  @Autowired
  AssociateService associateService;
  
	//Dependent Stages
	ArrayList<Checkin> checkins = new ArrayList<Checkin>();
<<<<<<< HEAD
	ArrayList<ClientQ> clientQs = new ArrayList<ClientQ>();	
	ArrayList<Interviews> interviews = new ArrayList<Interviews>();
=======
	//ArrayList<ClientQ> clientQs = new ArrayList<ClientQ>();	
	ArrayList<Interview> interviews = new ArrayList<Interview>();
>>>>>>> 7c3deba117e26faf8ee05f21df2d0679cab31eea
	ArrayList<Job> jobs = new ArrayList<Job>();
	
	ArrayList<Client> priorityClients = new ArrayList<Client>();
	ArrayList<Client> regularClients = new ArrayList<Client>();
	ArrayList<Associate> associates = new ArrayList<Associate>();
	
	Random rand = new Random();
	
	double probabilityOfPriorityInterview = 60;
	double probabilityOfRegularInterview = 30;
	
	class ClientP extends Client{
	  double probabilityOfHiring;
	  double probabilityOfLiking;
	  double probabilityOfNotInterested;
	  
	  public ClientP(Client c){
	    super(c);
	    
	    probabilityOfHiring = rand.nextInt(20) + 60;   //Hiring probability is between 60 and 80.
	    probabilityOfLiking = rand.nextInt(10);          //Liking probability is between 0 and 10.
	    probabilityOfNotInterested = 100 - (probabilityOfHiring + probabilityOfLiking);
	  }
	}
	
	class AssociateP extends Associate{
	  double clientProbabilityMultiplier;
	  
	  public AssociateP(Associate a){
	    super(a);
	    int qualityOfAssociate = rand.nextInt(100); 
	    
	    if(qualityOfAssociate < 10)
	      clientProbabilityMultiplier = .5;
	    else if (qualityOfAssociate > 99)
	      clientProbabilityMultiplier = .125;
	    else
	      clientProbabilityMultiplier = 1;
	  }
	}
	
	public DataGeneration(){
	   associates.addAll(associateService.getAll());
	   Set<Client> allClients = clientService.getAll();
	   for(Client c : allClients){
	     if(c.isPriority())
	       priorityClients.add(c);
	     else
	       regularClients.add(c);
	   }
	   generate();
	}
	
	public void generate(){
	  for(Associate a : associates){
	    if(!a.isActive())      //
	      a.setActive(true);
	  }
	  
	}
	

	public ArrayList<Checkin> getCheckins()
	{
		return checkins;
	}
	public ArrayList<Interview> getInterviews()
	{
		return interviews;
	}
	public ArrayList<Job> getJobs()
	{
		return jobs;
	}
  public ArrayList<ClientQ> getClientQs() {
    return clientQs;
  }
}
