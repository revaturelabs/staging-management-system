package com.revature.sms.controllers.rest;

import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.revature.sms.entities.Certifications;

import com.revature.sms.services.CertificationsService;

@RestController
@RequestMapping("certifications")
public class CertificationsControllerImpl {

	@Autowired
	private CertificationsService certService;
	
	public CertificationsControllerImpl(CertificationsService certService) {
		super();
		this.certService = certService;
	}

	//get a list of all certifications 
	@GetMapping("/all")
	public Set<Certifications> getAllcert(){
		System.out.println(certService.getAllCertifications());
		return certService.getAllCertifications();
		
	}
	
/*	@GetMapping("/all")
	public List<Certifications> getAllCertType(){
		return certService.getAllCert_type();
	}*/
	//get a certification by ID
	@GetMapping("/{id}")
	public Certifications getCert(@PathVariable long cert_id){
		return certService.getById(cert_id);
	}
	
	//add a new certification by type
	@PostMapping("/add/certification")
	public void add(@RequestBody Certifications certifications){
		certService.add(certifications);
	}

	//get associate by id who has a certifications
	@GetMapping("/associate/{associateId}")
	public Set<Certifications> findByAssociate(@PathVariable long associateId) {
		return certService.findByAssociate(associateId);
	}
	
     @PutMapping
     public void updateCertifications(@RequestBody Certifications certifications){
    	 certService.update(certifications);
     }
     
     @DeleteMapping
     public void deleteCertifications(@RequestBody Certifications certifications){
    	 certService.delete(certifications);
     }
     
     @RequestMapping(value = "/upload")
  	public void uploadCert(@RequestParam("file") MultipartFile file) throws IOException{
  		System.out.println("############################################# TESTING");
  		System.out.println("TESTING ######################################### ::::::: " + file.getOriginalFilename());
  		
  		
  		//************************************************************************
  		
  		BasicAWSCredentials cred = new BasicAWSCredentials("AKIAJKPTF4KIZRRLDUIA", "s3/UB79GdnrvsXyc34gfy++PDeA7seqU7XzkU/dh");
  		AmazonS3 s3client = new AmazonS3Client(cred/*new ProfileCredentialsProvider()*/);
  		
  		
  		try {
              System.out.println("Uploading a new object to S3 from a file\n");
              //File file = new File(uploadFileName);
              //System.out.println("UPLOADED FILE AS STRING: "+uploadedFile+"\n\n");
              //FileReader file = new FileReader("file://localhost/C:/Users/caarl/Desktop/trialbucket.txt");
              
              ObjectMetadata metadata = new ObjectMetadata();
              s3client.putObject(new PutObjectRequest(
              		"s3buckettosend", file.getOriginalFilename(), file.getInputStream(), metadata).withCannedAcl(CannedAccessControlList.PublicRead));

           } catch (AmazonServiceException ase) {
              System.out.println("Caught an AmazonServiceException, which " +
              		"means your request made it " +
                      "to Amazon S3, but was rejected with an error response" +
                      " for some reason.");
              System.out.println("Error Message:    " + ase.getMessage());
              System.out.println("HTTP Status Code: " + ase.getStatusCode());
              System.out.println("AWS Error Code:   " + ase.getErrorCode());
              System.out.println("Error Type:       " + ase.getErrorType());
              System.out.println("Request ID:       " + ase.getRequestId());
          } catch (AmazonClientException ace) {
              System.out.println("Caught an AmazonClientException, which " +
              		"means the client encountered " +
                      "an internal error while trying to " +
                      "communicate with S3, " +
                      "such as not being able to access the network.");
              System.out.println("Error Message: " + ace.getMessage());
          }
  		
  		//*******************************************************************************
      }

     
}
